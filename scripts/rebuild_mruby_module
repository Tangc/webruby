#!/bin/bash

# script for rebuilding mruby module

# Usage:

# ./rebuild_mruby_module: generate mrbc and libmruby.so file for
# parsing mruby file and linking into final js file respectively,
# if we already generate the latest version of these two files(judging
# by the last commit in git repository), we do not rebuild the files

# ./rebuild_mruby_module test: generate mrbc binary, libmruby.so
# library and mruby-test.js file for mruby unit test. Notice in this
# case, we would always rebuilding the mruby project regardless of
# last commits. This is for development purpose.


# First, navigates to mruby directory
cd `dirname ${BASH_SOURCE[0]}`/../modules/mruby

# Uses absolute paths here
MRUBY_DIR=`pwd`
BUILD_PATH=${MRUBY_DIR}/../../build
LAST_COMMIT_FILE=${BUILD_PATH}/last-commit.txt
MRBC_FILE=${BUILD_PATH}/mrbc
LIB_FILE=${BUILD_PATH}/libmruby.a
MRUBY_JS_TEST_FILE=${BUILD_PATH}/mruby-test.js

# Gets current commit revision
CURRENT_COMMIT=`git rev-list --max-count=1 HEAD`

# Gets the commit revision of last mruby build
LAST_BUILD_COMMIT=""
if [ -f $LAST_COMMIT_FILE ]; then
    LAST_BUILD_COMMIT=`cat ${LAST_COMMIT_FILE}`
fi

# If mruby has no changes, we do not need to build it again
# Note that if we set the flag to build tests, mruby is always
# recompiled regardless of the commit revision.
if [[ ${CURRENT_COMMIT} == ${LAST_BUILD_COMMIT} ]] && [[ $1 != "test" ]]; then
    echo "mruby has no updates since last built, exit."
    exit 0
fi

# Now starts building mruby, first build the native version for mrbc
make clean && make
if [ $? -ne 0 ]; then
    echo "Error occurs when building native mruby!"
    exit 1
fi

cp bin/mrbc ${MRBC_FILE}

# Now build mruby again using emscripten
EMSCRIPTEN_DIR=${MRUBY_DIR}/../emscripten
EMCC=${EMSCRIPTEN_DIR}/emcc
EMAR=${EMSCRIPTEN_DIR}/emar
# Refer to Makefile for the reason of adding -DMRB_USE_FLOAT flag
EMCC_CFLAGS="-DMRB_USE_FLOAT"

# Executes make command with emcc as compiler
#
# Arguments:
#  - MAKE_LOC => Location for running make
#  - MAKE_TARGET => Make target, can be empty for default target
#  - CUSTOM_MAKE_FLAGS => Additional make flags needed
#
# Notes:
#  Due to the wired behaviour of bash escaping, we use "bash -c" mode here.
function emcc_make() {
    bash -c "make -C ${MAKE_LOC} CC=${EMCC} LL=${EMCC} AR=${EMAR} CP=cp CAT=cat CFLAGS=\"${EMCC_CFLAGS}\" ${CUSTOM_MAKE_FLAGS} ${MAKE_TARGET}"
}

# Here make target is "all"(default)
unset MAKE_TARGET
CUSTOM_MAKE_FLAGS="MRBC=${MRBC_FILE}"

# We run a touch on MRBC_FILE to use the generated binary from previous native
# build instead of building a new one using emcc here(which will not work).
make clean && MAKE_LOC=src; emcc_make && touch ${MRBC_FILE} && MAKE_LOC=mrblib; emcc_make
if [ $? -ne 0 ]; then
    echo "Error occurs when building mrblib using emscripten!"
    exit 1
fi

cp lib/libmruby.a ${LIB_FILE}
if [ $? -ne 0 ]; then
    echo "Error occurs when generating libmruby.so!"
    exit 1
fi

if [[ $1 == "test" ]]; then
    MAKE_TARGET=mrbtest.js
    CUSTOM_MAKE_FLAGS="LDFLAGS=\"-s ALLOW_MEMORY_GROWTH=1\" EXE=${MAKE_TARGET} MRBC=${MRBC_FILE}"

    touch ${MRBC_FILE}; MAKE_LOC=test; emcc_make
    if [ $? -ne 0 ]; then
        echo "Error occurs when building mruby tests using emscripten!"
        exit 1
    fi

    # mrbtest.js does not belong to mruby, so we would move it instead of copying it.
    mv ${MRUBY_DIR}/test/${MAKE_TARGET} ${BUILD_PATH}
    if [ $? -ne 0 ]; then
        echo "Error occurs when generating mruby test js file!"
        exit 1
    fi
fi

echo ${CURRENT_COMMIT} > ${LAST_COMMIT_FILE}

echo "Finish building mruby!"
