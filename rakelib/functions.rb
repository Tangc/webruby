# Prepare exported functions for emscripten

# Webruby now supports 3 kinds of Ruby source code loading methods:

# * WEBRUBY.run(): this function loads source code compiled from
# the app folder, which is already contained in the js file.

# * WEBRUBY.run_bytecode(): this function loads an array of mruby
# bytecode, we can generate bytecode using mrbc binary in mruby and
# load the source code at runtime.

# * WEBRUBY.run_source(): this function parses and loads Ruby source
# code on the fly.

# Note that different functions are needed for the 3 different loading methods,
# for example, WEBRUBY.run_source requires all the parsing code is present,
# while the first 2 modes only requires code for loading bytecodes.
# Given these considerations, we allow 3 loading modes in webruby:

# 0 - only WEBRUBY.run is supported
# 1 - WEBRUBY.run and WEBRUBY.run_bytecode are supported
# 2 - all 3 loading methods are supported

# It may appear that mode 0 and mode 1 requires the same set of functions
# since they both load bytecodes, but due to the fact that mode 0 only loads
# pre-defined bytecode array, chances are optimizers may perform some tricks
# to eliminate parts of the source code for mode 0. Hence we still distinguish
# mode 0 from mode 1 here

COMMON_EXPORTED_FUNCTIONS = ['mrb_open', 'mrb_close'];

# Gets a list of all exported functions including following types:
# * Functions exported by mrbgems
# * Functions required by loading modes
# * Functions that are customly added by users
#
# ==== Attributes
#
# * +gem_function_file+ - File name of functions exported by mrbgems, this is
# generated by scripts/gen_gems_config.rb
# * +load_mode+ - Loading mode
# * +custom_functions+ - Array of custom functions added by user
def get_exported_functions(gem_function_file, load_mode, custom_functions)
  functions = File.readlines(gem_function_file).map {|f| f.strip}
  functions = functions.concat(custom_functions)
  functions = functions.concat(COMMON_EXPORTED_FUNCTIONS)

  # WEBRUBY.run is supported by all loading modes
  functions << 'webruby_internal_run'

  # WEBRUBY.run_bytecode
  functions << 'mrb_load_irep' if load_mode > 0

  # WEBRUBY.run_source
  functions << 'mrb_load_string' if load_mode > 1

  functions.uniq
end

# Generate command line option for exported functions, see
# gen_exported_functions for argument details
def get_exported_arg(gem_function_file, load_mode, custom_functions)
  func_str = get_exported_functions(gem_function_file, load_mode, custom_functions)
    .map{|f| "'_#{f}'"}.join ', '

  "-s EXPORTED_FUNCTIONS=\"[#{func_str}]\""
end
